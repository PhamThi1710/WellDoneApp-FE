import Csv from "assets/documentType/csv";
import Defaulticon from "assets/documentType/defaulticon";
import Doc from "assets/documentType/doc";
import Jpg from "assets/documentType/jpg";
import Pdf from "assets/documentType/pdf";
import Png from "assets/documentType/png";
import Ppt from "assets/documentType/ppt";
import Xls from "assets/documentType/xls";
import Zip from "assets/documentType/zip";
import { Text } from "react-native";
import MaterialIcons from "react-native-vector-icons/MaterialIcons";

export const renderErrorMessageResponse = (
  responseString: string | string[]
) => {
  const regex = /^Groups \d+ are already associated with other projects$/;
  if (
    (Array.isArray(responseString) &&
      "name must be longer than or equal to 2 characters" in responseString) ||
    responseString === "name must be longer than or equal to 2 characters"
  ) {
    return "T√™n ph·∫£i d√†i h∆°n ho·∫∑c b·∫±ng 2 k√Ω t·ª±";
  } else if (responseString === "Email already exists") {
    return "Email ƒë√£ t·ªìn t·∫°i";
  } else if (responseString === "email must be an email") {
    return "Email kh√¥ng h·ª£p l·ªá";
  } else if (responseString === "password is not strong enough") {
    return "M·∫≠t kh·∫©u kh√¥ng ƒë·ªß m·∫°nh";
  } else if (responseString === "Invalid verification code") {
    return "M√£ x√°c th·ª±c kh√¥ng t·ªìn t·∫°i";
  } else if (
    Array.isArray(responseString) &&
    responseString.every(
      (msg, index) =>
        [
          "property code should not exist",
          "name must be shorter than or equal to 50 characters",
          "name must be longer than or equal to 2 characters",
          "name must be a string",
          "password is not strong enough",
        ][index] === msg
    )
  ) {
    return "M√£ x√°c th·ª±c kh√¥ng t·ªìn t·∫°i";
  } else if (
    Array.isArray(responseString) &&
    responseString.every(
      (msg, index) =>
        [
          "property groups should not exist",
          "name must be longer than or equal to 3 characters",
          "each value in groupIds must be a number conforming to the specified constraints",
          "groupIds must be an array",
        ][index] === msg
    )
  ) {
    return "T√™n d·ª± √°n ph·∫£i d√†i h∆°n ho·∫∑c b·∫±ng 3 k√Ω t·ª±";
  } else if (responseString === "Email already verified") {
    return "Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p~ ";
  } else if (responseString === "User not found") {
    return "Ng∆∞·ªùi d√πng ho·∫∑c email kh√¥ng t·ªìn t·∫°i! H√£y ki·ªÉm tra l·∫°i~";
  } else if (responseString === "Unauthorized") {
    return "Truy c·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p v√† th·ª≠ l·∫°i ~";
  } else if (responseString === "Invalid reset attempt") {
    return "D∆∞·ªùng nh∆∞ ƒë√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i~";
  } else if (responseString === "Invalid or expired reset code") {
    return "M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng t·ªìn t·∫°i ~ Vui l√≤ng th·ª≠ l·∫°i.";
  } else if (responseString === "newPassword is not strong enough") {
    return "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë·ªß m·∫°nh. H√£y nh·∫≠p m·∫≠t kh·∫©u kh√°c~";
  } else if (responseString === "Password is incorrect") {
    return "Nh·∫≠p sai m·∫≠t kh·∫©u hi·ªán t·∫°i";
  } else if (
    (Array.isArray(responseString) &&
      "password must be longer than or equal to 8 characters" in
        responseString) ||
    responseString === "password must be longer than or equal to 8 characters"
  ) {
    return "M·∫≠t kh·∫©u ph·∫£i t·ªëi thi·ªÉu 8 k√Ω t·ª±";
  } else if (
    (Array.isArray(responseString) &&
      "newPassword is not strong enough" in responseString) ||
    responseString === "newPassword is not strong enough"
  ) {
    return "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë·ªß m·∫°nh";
  } else if (responseString === "At least one group must be specified") {
    return "H√£y ch·ªçn √≠t nh·∫•t m·ªôt nh√≥m ƒë·ªÉ th√™m v√†o d·ª± √°n b·∫°n nh√©!";
  } else if (typeof responseString === "string" && regex.test(responseString)) {
    return "M·ªôt trong c√°c nh√≥m ƒë∆∞·ª£c ch·ªçn ƒë√£ ƒë∆∞·ª£c g√°n cho d·ª± √°n kh√°c!";
  } else if (
    responseString ===
    "You must be a leader in at least one of the specified groups"
  ) {
    return "H√£y t·∫°o nh√≥m m·ªõi tr∆∞·ªõc khi t·∫°o d·ª± √°n b·∫°n nh√©!";
  } else {
    return "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i!";
  }
};

export const renderSuccessMessageResponse = (
  responseString = "T√°c v·ª• th√†nh c√¥ng üî•üå∏!"
) => {
  if (
    responseString ===
    "User registered successfully. Please check your email for verification code."
  ) {
    return "ƒêƒÉng k√Ω th√†nh c√¥ng! Ki·ªÉm tra email c·ªßa b·∫°n nh√© üî•üå∏";
  } else if (responseString === "Email verified successfully") {
    return "Email x√°c th·ª±c th√†nh c√¥ng üî•üå∏!";
  } else if (responseString === "Verification code sent successfully üî•üå∏") {
    return "Ch√∫ng t√¥i ƒë√£ g·ª≠i l·∫°i m√£ x√°c th·ª±c email. H√£y ki·ªÉm tra b·∫°n nh√© üî•üå∏";
  } else if (
    responseString ===
    "If your email is registered, you will receive a password reset code."
  ) {
    return "N·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ x√°c th·ª±c, h√£y ki·ªÉm tra email ƒë√£ nh·∫≠p!";
  } else if (responseString === "Password reset successful") {
    return "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi üî•üå∏";
  } else {
    return responseString;
  }
};

export const renderStatusLabel = (status: string) => {
  if (status === "COMPLETED") {
    return (
      <Text className="text-caption-bold font-medium text-neutral-500 bg-primary-100 px-2 py-1 rounded-full">
        Ho√†n th√†nh
      </Text>
    );
  } else if (status === "IN_PROGRESS") {
    return (
      <Text className="text-caption-bold font-medium text-neutral-500 bg-secondary-200 px-2 py-1 rounded-full">
        ƒêang th·ª±c hi·ªán
      </Text>
    );
  } else {
    return (
      <Text className="text-caption-bold font-medium text-neutral-500 bg-warning-100 px-2 py-1 rounded-full">
        M·ªõi
      </Text>
    );
  }
};

export const renderDocumentTypeIcon = (
  type: string,
  width: number = 40,
  height: number = 40
) => {
  if (type === "pdf") {
    return <Pdf width={width} height={height} />;
  } else if (type === "doc" || type === "docx") {
    return <Doc width={width} height={height} />;
  } else if (type === "xls" || type === "xlsx") {
    return <Xls width={width} height={height} />;
  } else if (type === "ppt" || type === "pptx") {
    return <Ppt width={width} height={height} />;
  } else if (type === "png") {
    return <Png width={width} height={height} />;
  } else if (type === "zip") {
    return <Zip width={width} height={height} />;
  } else if (type === "csv") {
    return <Csv width={width} height={height} />;
  } else if (type === "jpg") {
    return <Jpg width={width} height={height} />;
  } else {
    return <Defaulticon width={width} height={height} />;
  }
};

export const renderPriorityIcon = (priority: string) => {
  if (priority === "High") {
    return (
      <MaterialIcons name="keyboard-double-arrow-up" size={25} color="red" />
    );
  }
  if (priority === "Medium") {
    return <MaterialIcons name="keyboard-arrow-up" size={25} color="red" />;
  }
  if (priority === "Low") {
    return <MaterialIcons name="arrow-drop-up" size={25} color="green" />;
  }
};
